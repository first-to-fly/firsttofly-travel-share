/* eslint-disable */
// @ts-nocheck autogenerated by grpc_tools_node_protoc_ts. DO NOT EDIT!

// GENERATED CODE -- DO NOT EDIT!

'use strict';
var grpc = require('@grpc/grpc-js');
var authorization_pb = require('./authorization_pb.js');

function serialize_ftf_contract_Empty(arg) {
  if (!(arg instanceof authorization_pb.Empty)) {
    throw new Error('Expected argument of type ftf_contract.Empty');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_ftf_contract_Empty(buffer_arg) {
  return authorization_pb.Empty.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_ftf_contract_Pong(arg) {
  if (!(arg instanceof authorization_pb.Pong)) {
    throw new Error('Expected argument of type ftf_contract.Pong');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_ftf_contract_Pong(buffer_arg) {
  return authorization_pb.Pong.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_ftf_contract_SimpleResultOutput(arg) {
  if (!(arg instanceof authorization_pb.SimpleResultOutput)) {
    throw new Error('Expected argument of type ftf_contract.SimpleResultOutput');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_ftf_contract_SimpleResultOutput(buffer_arg) {
  return authorization_pb.SimpleResultOutput.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_ftf_contract_UserEntityActionsInput(arg) {
  if (!(arg instanceof authorization_pb.UserEntityActionsInput)) {
    throw new Error('Expected argument of type ftf_contract.UserEntityActionsInput');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_ftf_contract_UserEntityActionsInput(buffer_arg) {
  return authorization_pb.UserEntityActionsInput.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_ftf_contract_UserEntityActionsOutput(arg) {
  if (!(arg instanceof authorization_pb.UserEntityActionsOutput)) {
    throw new Error('Expected argument of type ftf_contract.UserEntityActionsOutput');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_ftf_contract_UserEntityActionsOutput(buffer_arg) {
  return authorization_pb.UserEntityActionsOutput.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_ftf_contract_UserEntityPermissionsInput(arg) {
  if (!(arg instanceof authorization_pb.UserEntityPermissionsInput)) {
    throw new Error('Expected argument of type ftf_contract.UserEntityPermissionsInput');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_ftf_contract_UserEntityPermissionsInput(buffer_arg) {
  return authorization_pb.UserEntityPermissionsInput.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_ftf_contract_UserEntityPermissionsOutput(arg) {
  if (!(arg instanceof authorization_pb.UserEntityPermissionsOutput)) {
    throw new Error('Expected argument of type ftf_contract.UserEntityPermissionsOutput');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_ftf_contract_UserEntityPermissionsOutput(buffer_arg) {
  return authorization_pb.UserEntityPermissionsOutput.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_ftf_contract_UserGlobalActionsInput(arg) {
  if (!(arg instanceof authorization_pb.UserGlobalActionsInput)) {
    throw new Error('Expected argument of type ftf_contract.UserGlobalActionsInput');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_ftf_contract_UserGlobalActionsInput(buffer_arg) {
  return authorization_pb.UserGlobalActionsInput.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_ftf_contract_UserGlobalActionsOutput(arg) {
  if (!(arg instanceof authorization_pb.UserGlobalActionsOutput)) {
    throw new Error('Expected argument of type ftf_contract.UserGlobalActionsOutput');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_ftf_contract_UserGlobalActionsOutput(buffer_arg) {
  return authorization_pb.UserGlobalActionsOutput.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_ftf_contract_UserGlobalPermsInput(arg) {
  if (!(arg instanceof authorization_pb.UserGlobalPermsInput)) {
    throw new Error('Expected argument of type ftf_contract.UserGlobalPermsInput');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_ftf_contract_UserGlobalPermsInput(buffer_arg) {
  return authorization_pb.UserGlobalPermsInput.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_ftf_contract_UserGlobalPermsOutput(arg) {
  if (!(arg instanceof authorization_pb.UserGlobalPermsOutput)) {
    throw new Error('Expected argument of type ftf_contract.UserGlobalPermsOutput');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_ftf_contract_UserGlobalPermsOutput(buffer_arg) {
  return authorization_pb.UserGlobalPermsOutput.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_ftf_contract_UserPermsOnSolelyEntitiesInput(arg) {
  if (!(arg instanceof authorization_pb.UserPermsOnSolelyEntitiesInput)) {
    throw new Error('Expected argument of type ftf_contract.UserPermsOnSolelyEntitiesInput');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_ftf_contract_UserPermsOnSolelyEntitiesInput(buffer_arg) {
  return authorization_pb.UserPermsOnSolelyEntitiesInput.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_ftf_contract_UserPermsOnSolelyEntitiesOutput(arg) {
  if (!(arg instanceof authorization_pb.UserPermsOnSolelyEntitiesOutput)) {
    throw new Error('Expected argument of type ftf_contract.UserPermsOnSolelyEntitiesOutput');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_ftf_contract_UserPermsOnSolelyEntitiesOutput(buffer_arg) {
  return authorization_pb.UserPermsOnSolelyEntitiesOutput.deserializeBinary(new Uint8Array(buffer_arg));
}


var AuthorizationService = exports.AuthorizationService = {
  ping: {
    path: '/ftf_contract.Authorization/Ping',
    requestStream: false,
    responseStream: false,
    requestType: authorization_pb.Empty,
    responseType: authorization_pb.Pong,
    requestSerialize: serialize_ftf_contract_Empty,
    requestDeserialize: deserialize_ftf_contract_Empty,
    responseSerialize: serialize_ftf_contract_Pong,
    responseDeserialize: deserialize_ftf_contract_Pong,
  },
  checkIfUserHasGlobalPermissions: {
    path: '/ftf_contract.Authorization/CheckIfUserHasGlobalPermissions',
    requestStream: false,
    responseStream: false,
    requestType: authorization_pb.UserGlobalPermsInput,
    responseType: authorization_pb.UserGlobalPermsOutput,
    requestSerialize: serialize_ftf_contract_UserGlobalPermsInput,
    requestDeserialize: deserialize_ftf_contract_UserGlobalPermsInput,
    responseSerialize: serialize_ftf_contract_UserGlobalPermsOutput,
    responseDeserialize: deserialize_ftf_contract_UserGlobalPermsOutput,
  },
  checkIfUserCanPerformGlobalActions: {
    path: '/ftf_contract.Authorization/CheckIfUserCanPerformGlobalActions',
    requestStream: false,
    responseStream: false,
    requestType: authorization_pb.UserGlobalActionsInput,
    responseType: authorization_pb.UserGlobalActionsOutput,
    requestSerialize: serialize_ftf_contract_UserGlobalActionsInput,
    requestDeserialize: deserialize_ftf_contract_UserGlobalActionsInput,
    responseSerialize: serialize_ftf_contract_UserGlobalActionsOutput,
    responseDeserialize: deserialize_ftf_contract_UserGlobalActionsOutput,
  },
  checkIfUserHasPermissionsOnEachEntities: {
    path: '/ftf_contract.Authorization/CheckIfUserHasPermissionsOnEachEntities',
    requestStream: false,
    responseStream: false,
    requestType: authorization_pb.UserEntityPermissionsInput,
    responseType: authorization_pb.UserEntityPermissionsOutput,
    requestSerialize: serialize_ftf_contract_UserEntityPermissionsInput,
    requestDeserialize: deserialize_ftf_contract_UserEntityPermissionsInput,
    responseSerialize: serialize_ftf_contract_UserEntityPermissionsOutput,
    responseDeserialize: deserialize_ftf_contract_UserEntityPermissionsOutput,
  },
  checkIfUserHasPermissionsOnAllEntities: {
    path: '/ftf_contract.Authorization/CheckIfUserHasPermissionsOnAllEntities',
    requestStream: false,
    responseStream: false,
    requestType: authorization_pb.UserEntityPermissionsInput,
    responseType: authorization_pb.SimpleResultOutput,
    requestSerialize: serialize_ftf_contract_UserEntityPermissionsInput,
    requestDeserialize: deserialize_ftf_contract_UserEntityPermissionsInput,
    responseSerialize: serialize_ftf_contract_SimpleResultOutput,
    responseDeserialize: deserialize_ftf_contract_SimpleResultOutput,
  },
  checkIfUserCanPerformActionsOnEachEntities: {
    path: '/ftf_contract.Authorization/CheckIfUserCanPerformActionsOnEachEntities',
    requestStream: false,
    responseStream: false,
    requestType: authorization_pb.UserEntityActionsInput,
    responseType: authorization_pb.UserEntityActionsOutput,
    requestSerialize: serialize_ftf_contract_UserEntityActionsInput,
    requestDeserialize: deserialize_ftf_contract_UserEntityActionsInput,
    responseSerialize: serialize_ftf_contract_UserEntityActionsOutput,
    responseDeserialize: deserialize_ftf_contract_UserEntityActionsOutput,
  },
  checkIfUserCanPerformActionsOnAllEntities: {
    path: '/ftf_contract.Authorization/CheckIfUserCanPerformActionsOnAllEntities',
    requestStream: false,
    responseStream: false,
    requestType: authorization_pb.UserEntityActionsInput,
    responseType: authorization_pb.SimpleResultOutput,
    requestSerialize: serialize_ftf_contract_UserEntityActionsInput,
    requestDeserialize: deserialize_ftf_contract_UserEntityActionsInput,
    responseSerialize: serialize_ftf_contract_SimpleResultOutput,
    responseDeserialize: deserialize_ftf_contract_SimpleResultOutput,
  },
  getUserPermissionsOnSolelyEntities: {
    path: '/ftf_contract.Authorization/GetUserPermissionsOnSolelyEntities',
    requestStream: false,
    responseStream: false,
    requestType: authorization_pb.UserPermsOnSolelyEntitiesInput,
    responseType: authorization_pb.UserPermsOnSolelyEntitiesOutput,
    requestSerialize: serialize_ftf_contract_UserPermsOnSolelyEntitiesInput,
    requestDeserialize: deserialize_ftf_contract_UserPermsOnSolelyEntitiesInput,
    responseSerialize: serialize_ftf_contract_UserPermsOnSolelyEntitiesOutput,
    responseDeserialize: deserialize_ftf_contract_UserPermsOnSolelyEntitiesOutput,
  },
};

exports.AuthorizationClient = grpc.makeGenericClientConstructor(AuthorizationService);
