/* eslint-disable */
// @ts-nocheck autogenerated by grpc_tools_node_protoc_ts. DO NOT EDIT!

// package: ftf_contract
// file: authorization.proto

import * as jspb from "google-protobuf";

export class Empty extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Empty.AsObject;
  static toObject(includeInstance: boolean, msg: Empty): Empty.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Empty, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Empty;
  static deserializeBinaryFromReader(message: Empty, reader: jspb.BinaryReader): Empty;
}

export namespace Empty {
  export type AsObject = {
  }
}

export class Pong extends jspb.Message {
  getMessage(): string;
  setMessage(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Pong.AsObject;
  static toObject(includeInstance: boolean, msg: Pong): Pong.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Pong, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Pong;
  static deserializeBinaryFromReader(message: Pong, reader: jspb.BinaryReader): Pong;
}

export namespace Pong {
  export type AsObject = {
    message: string,
  }
}

export class SimpleResultOutput extends jspb.Message {
  getResult(): boolean;
  setResult(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SimpleResultOutput.AsObject;
  static toObject(includeInstance: boolean, msg: SimpleResultOutput): SimpleResultOutput.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SimpleResultOutput, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SimpleResultOutput;
  static deserializeBinaryFromReader(message: SimpleResultOutput, reader: jspb.BinaryReader): SimpleResultOutput;
}

export namespace SimpleResultOutput {
  export type AsObject = {
    result: boolean,
  }
}

export class UserGlobalPermsInput extends jspb.Message {
  getUserid(): string;
  setUserid(value: string): void;

  clearRequiredpermissionsList(): void;
  getRequiredpermissionsList(): Array<string>;
  setRequiredpermissionsList(value: Array<string>): void;
  addRequiredpermissions(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UserGlobalPermsInput.AsObject;
  static toObject(includeInstance: boolean, msg: UserGlobalPermsInput): UserGlobalPermsInput.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UserGlobalPermsInput, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UserGlobalPermsInput;
  static deserializeBinaryFromReader(message: UserGlobalPermsInput, reader: jspb.BinaryReader): UserGlobalPermsInput;
}

export namespace UserGlobalPermsInput {
  export type AsObject = {
    userid: string,
    requiredpermissionsList: Array<string>,
  }
}

export class UserGlobalPermsOutput extends jspb.Message {
  getResult(): boolean;
  setResult(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UserGlobalPermsOutput.AsObject;
  static toObject(includeInstance: boolean, msg: UserGlobalPermsOutput): UserGlobalPermsOutput.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UserGlobalPermsOutput, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UserGlobalPermsOutput;
  static deserializeBinaryFromReader(message: UserGlobalPermsOutput, reader: jspb.BinaryReader): UserGlobalPermsOutput;
}

export namespace UserGlobalPermsOutput {
  export type AsObject = {
    result: boolean,
  }
}

export class UserGlobalActionsInput extends jspb.Message {
  getUserid(): string;
  setUserid(value: string): void;

  clearGlobalactionsList(): void;
  getGlobalactionsList(): Array<string>;
  setGlobalactionsList(value: Array<string>): void;
  addGlobalactions(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UserGlobalActionsInput.AsObject;
  static toObject(includeInstance: boolean, msg: UserGlobalActionsInput): UserGlobalActionsInput.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UserGlobalActionsInput, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UserGlobalActionsInput;
  static deserializeBinaryFromReader(message: UserGlobalActionsInput, reader: jspb.BinaryReader): UserGlobalActionsInput;
}

export namespace UserGlobalActionsInput {
  export type AsObject = {
    userid: string,
    globalactionsList: Array<string>,
  }
}

export class UserGlobalActionsOutput extends jspb.Message {
  getResultMap(): jspb.Map<string, boolean>;
  clearResultMap(): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UserGlobalActionsOutput.AsObject;
  static toObject(includeInstance: boolean, msg: UserGlobalActionsOutput): UserGlobalActionsOutput.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UserGlobalActionsOutput, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UserGlobalActionsOutput;
  static deserializeBinaryFromReader(message: UserGlobalActionsOutput, reader: jspb.BinaryReader): UserGlobalActionsOutput;
}

export namespace UserGlobalActionsOutput {
  export type AsObject = {
    resultMap: Array<[string, boolean]>,
  }
}

export class UserEntityPermissionsInput extends jspb.Message {
  getUserid(): string;
  setUserid(value: string): void;

  clearOidsList(): void;
  getOidsList(): Array<string>;
  setOidsList(value: Array<string>): void;
  addOids(value: string, index?: number): string;

  clearRequiredpermissionsList(): void;
  getRequiredpermissionsList(): Array<string>;
  setRequiredpermissionsList(value: Array<string>): void;
  addRequiredpermissions(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UserEntityPermissionsInput.AsObject;
  static toObject(includeInstance: boolean, msg: UserEntityPermissionsInput): UserEntityPermissionsInput.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UserEntityPermissionsInput, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UserEntityPermissionsInput;
  static deserializeBinaryFromReader(message: UserEntityPermissionsInput, reader: jspb.BinaryReader): UserEntityPermissionsInput;
}

export namespace UserEntityPermissionsInput {
  export type AsObject = {
    userid: string,
    oidsList: Array<string>,
    requiredpermissionsList: Array<string>,
  }
}

export class UserEntityPermissionsOutput extends jspb.Message {
  getResultMap(): jspb.Map<string, boolean>;
  clearResultMap(): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UserEntityPermissionsOutput.AsObject;
  static toObject(includeInstance: boolean, msg: UserEntityPermissionsOutput): UserEntityPermissionsOutput.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UserEntityPermissionsOutput, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UserEntityPermissionsOutput;
  static deserializeBinaryFromReader(message: UserEntityPermissionsOutput, reader: jspb.BinaryReader): UserEntityPermissionsOutput;
}

export namespace UserEntityPermissionsOutput {
  export type AsObject = {
    resultMap: Array<[string, boolean]>,
  }
}

export class UserEntityActionsInput extends jspb.Message {
  getUserid(): string;
  setUserid(value: string): void;

  clearOidsList(): void;
  getOidsList(): Array<string>;
  setOidsList(value: Array<string>): void;
  addOids(value: string, index?: number): string;

  clearEntityactionsList(): void;
  getEntityactionsList(): Array<string>;
  setEntityactionsList(value: Array<string>): void;
  addEntityactions(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UserEntityActionsInput.AsObject;
  static toObject(includeInstance: boolean, msg: UserEntityActionsInput): UserEntityActionsInput.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UserEntityActionsInput, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UserEntityActionsInput;
  static deserializeBinaryFromReader(message: UserEntityActionsInput, reader: jspb.BinaryReader): UserEntityActionsInput;
}

export namespace UserEntityActionsInput {
  export type AsObject = {
    userid: string,
    oidsList: Array<string>,
    entityactionsList: Array<string>,
  }
}

export class UserEntityActionsOutput extends jspb.Message {
  getResultMap(): jspb.Map<string, UserEntityPermissionsOutput>;
  clearResultMap(): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UserEntityActionsOutput.AsObject;
  static toObject(includeInstance: boolean, msg: UserEntityActionsOutput): UserEntityActionsOutput.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UserEntityActionsOutput, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UserEntityActionsOutput;
  static deserializeBinaryFromReader(message: UserEntityActionsOutput, reader: jspb.BinaryReader): UserEntityActionsOutput;
}

export namespace UserEntityActionsOutput {
  export type AsObject = {
    resultMap: Array<[string, UserEntityPermissionsOutput.AsObject]>,
  }
}

export class UserPermsOnSolelyEntitiesInput extends jspb.Message {
  getUserid(): string;
  setUserid(value: string): void;

  clearOidsList(): void;
  getOidsList(): Array<string>;
  setOidsList(value: Array<string>): void;
  addOids(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UserPermsOnSolelyEntitiesInput.AsObject;
  static toObject(includeInstance: boolean, msg: UserPermsOnSolelyEntitiesInput): UserPermsOnSolelyEntitiesInput.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UserPermsOnSolelyEntitiesInput, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UserPermsOnSolelyEntitiesInput;
  static deserializeBinaryFromReader(message: UserPermsOnSolelyEntitiesInput, reader: jspb.BinaryReader): UserPermsOnSolelyEntitiesInput;
}

export namespace UserPermsOnSolelyEntitiesInput {
  export type AsObject = {
    userid: string,
    oidsList: Array<string>,
  }
}

export class UserPermsOnSolelyEntitiesOutput extends jspb.Message {
  getResultMap(): jspb.Map<string, Permissions>;
  clearResultMap(): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UserPermsOnSolelyEntitiesOutput.AsObject;
  static toObject(includeInstance: boolean, msg: UserPermsOnSolelyEntitiesOutput): UserPermsOnSolelyEntitiesOutput.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UserPermsOnSolelyEntitiesOutput, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UserPermsOnSolelyEntitiesOutput;
  static deserializeBinaryFromReader(message: UserPermsOnSolelyEntitiesOutput, reader: jspb.BinaryReader): UserPermsOnSolelyEntitiesOutput;
}

export namespace UserPermsOnSolelyEntitiesOutput {
  export type AsObject = {
    resultMap: Array<[string, Permissions.AsObject]>,
  }
}

export class Permissions extends jspb.Message {
  clearPermissionsList(): void;
  getPermissionsList(): Array<string>;
  setPermissionsList(value: Array<string>): void;
  addPermissions(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Permissions.AsObject;
  static toObject(includeInstance: boolean, msg: Permissions): Permissions.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Permissions, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Permissions;
  static deserializeBinaryFromReader(message: Permissions, reader: jspb.BinaryReader): Permissions;
}

export namespace Permissions {
  export type AsObject = {
    permissionsList: Array<string>,
  }
}
