// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: authorization.proto

package ftf_contract

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthorizationClient is the client API for Authorization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizationClient interface {
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Pong, error)
	CheckIfUserHasGlobalPermissions(ctx context.Context, in *UserGlobalPermsInput, opts ...grpc.CallOption) (*UserGlobalPermsOutput, error)
	CheckIfUserCanPerformGlobalActions(ctx context.Context, in *UserGlobalActionsInput, opts ...grpc.CallOption) (*UserGlobalActionsOutput, error)
	CheckIfUserHasPermissionsOnEachEntities(ctx context.Context, in *UserEntityPermissionsInput, opts ...grpc.CallOption) (*UserEntityPermissionsOutput, error)
	CheckIfUserHasPermissionsOnAllEntities(ctx context.Context, in *UserEntityPermissionsInput, opts ...grpc.CallOption) (*SimpleResultOutput, error)
	CheckIfUserCanPerformActionsOnEachEntities(ctx context.Context, in *UserEntityActionsInput, opts ...grpc.CallOption) (*UserEntityActionsOutput, error)
	CheckIfUserCanPerformActionsOnAllEntities(ctx context.Context, in *UserEntityActionsInput, opts ...grpc.CallOption) (*SimpleResultOutput, error)
	GetUserPermissionsOnSolelyEntities(ctx context.Context, in *UserPermsOnSolelyEntitiesInput, opts ...grpc.CallOption) (*UserPermsOnSolelyEntitiesOutput, error)
}

type authorizationClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationClient(cc grpc.ClientConnInterface) AuthorizationClient {
	return &authorizationClient{cc}
}

func (c *authorizationClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/ftf_contract.Authorization/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) CheckIfUserHasGlobalPermissions(ctx context.Context, in *UserGlobalPermsInput, opts ...grpc.CallOption) (*UserGlobalPermsOutput, error) {
	out := new(UserGlobalPermsOutput)
	err := c.cc.Invoke(ctx, "/ftf_contract.Authorization/CheckIfUserHasGlobalPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) CheckIfUserCanPerformGlobalActions(ctx context.Context, in *UserGlobalActionsInput, opts ...grpc.CallOption) (*UserGlobalActionsOutput, error) {
	out := new(UserGlobalActionsOutput)
	err := c.cc.Invoke(ctx, "/ftf_contract.Authorization/CheckIfUserCanPerformGlobalActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) CheckIfUserHasPermissionsOnEachEntities(ctx context.Context, in *UserEntityPermissionsInput, opts ...grpc.CallOption) (*UserEntityPermissionsOutput, error) {
	out := new(UserEntityPermissionsOutput)
	err := c.cc.Invoke(ctx, "/ftf_contract.Authorization/CheckIfUserHasPermissionsOnEachEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) CheckIfUserHasPermissionsOnAllEntities(ctx context.Context, in *UserEntityPermissionsInput, opts ...grpc.CallOption) (*SimpleResultOutput, error) {
	out := new(SimpleResultOutput)
	err := c.cc.Invoke(ctx, "/ftf_contract.Authorization/CheckIfUserHasPermissionsOnAllEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) CheckIfUserCanPerformActionsOnEachEntities(ctx context.Context, in *UserEntityActionsInput, opts ...grpc.CallOption) (*UserEntityActionsOutput, error) {
	out := new(UserEntityActionsOutput)
	err := c.cc.Invoke(ctx, "/ftf_contract.Authorization/CheckIfUserCanPerformActionsOnEachEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) CheckIfUserCanPerformActionsOnAllEntities(ctx context.Context, in *UserEntityActionsInput, opts ...grpc.CallOption) (*SimpleResultOutput, error) {
	out := new(SimpleResultOutput)
	err := c.cc.Invoke(ctx, "/ftf_contract.Authorization/CheckIfUserCanPerformActionsOnAllEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) GetUserPermissionsOnSolelyEntities(ctx context.Context, in *UserPermsOnSolelyEntitiesInput, opts ...grpc.CallOption) (*UserPermsOnSolelyEntitiesOutput, error) {
	out := new(UserPermsOnSolelyEntitiesOutput)
	err := c.cc.Invoke(ctx, "/ftf_contract.Authorization/GetUserPermissionsOnSolelyEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationServer is the server API for Authorization service.
// All implementations must embed UnimplementedAuthorizationServer
// for forward compatibility
type AuthorizationServer interface {
	Ping(context.Context, *Empty) (*Pong, error)
	CheckIfUserHasGlobalPermissions(context.Context, *UserGlobalPermsInput) (*UserGlobalPermsOutput, error)
	CheckIfUserCanPerformGlobalActions(context.Context, *UserGlobalActionsInput) (*UserGlobalActionsOutput, error)
	CheckIfUserHasPermissionsOnEachEntities(context.Context, *UserEntityPermissionsInput) (*UserEntityPermissionsOutput, error)
	CheckIfUserHasPermissionsOnAllEntities(context.Context, *UserEntityPermissionsInput) (*SimpleResultOutput, error)
	CheckIfUserCanPerformActionsOnEachEntities(context.Context, *UserEntityActionsInput) (*UserEntityActionsOutput, error)
	CheckIfUserCanPerformActionsOnAllEntities(context.Context, *UserEntityActionsInput) (*SimpleResultOutput, error)
	GetUserPermissionsOnSolelyEntities(context.Context, *UserPermsOnSolelyEntitiesInput) (*UserPermsOnSolelyEntitiesOutput, error)
	mustEmbedUnimplementedAuthorizationServer()
}

// UnimplementedAuthorizationServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorizationServer struct {
}

func (UnimplementedAuthorizationServer) Ping(context.Context, *Empty) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAuthorizationServer) CheckIfUserHasGlobalPermissions(context.Context, *UserGlobalPermsInput) (*UserGlobalPermsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfUserHasGlobalPermissions not implemented")
}
func (UnimplementedAuthorizationServer) CheckIfUserCanPerformGlobalActions(context.Context, *UserGlobalActionsInput) (*UserGlobalActionsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfUserCanPerformGlobalActions not implemented")
}
func (UnimplementedAuthorizationServer) CheckIfUserHasPermissionsOnEachEntities(context.Context, *UserEntityPermissionsInput) (*UserEntityPermissionsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfUserHasPermissionsOnEachEntities not implemented")
}
func (UnimplementedAuthorizationServer) CheckIfUserHasPermissionsOnAllEntities(context.Context, *UserEntityPermissionsInput) (*SimpleResultOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfUserHasPermissionsOnAllEntities not implemented")
}
func (UnimplementedAuthorizationServer) CheckIfUserCanPerformActionsOnEachEntities(context.Context, *UserEntityActionsInput) (*UserEntityActionsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfUserCanPerformActionsOnEachEntities not implemented")
}
func (UnimplementedAuthorizationServer) CheckIfUserCanPerformActionsOnAllEntities(context.Context, *UserEntityActionsInput) (*SimpleResultOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfUserCanPerformActionsOnAllEntities not implemented")
}
func (UnimplementedAuthorizationServer) GetUserPermissionsOnSolelyEntities(context.Context, *UserPermsOnSolelyEntitiesInput) (*UserPermsOnSolelyEntitiesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermissionsOnSolelyEntities not implemented")
}
func (UnimplementedAuthorizationServer) mustEmbedUnimplementedAuthorizationServer() {}

// UnsafeAuthorizationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizationServer will
// result in compilation errors.
type UnsafeAuthorizationServer interface {
	mustEmbedUnimplementedAuthorizationServer()
}

func RegisterAuthorizationServer(s grpc.ServiceRegistrar, srv AuthorizationServer) {
	s.RegisterService(&Authorization_ServiceDesc, srv)
}

func _Authorization_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ftf_contract.Authorization/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_CheckIfUserHasGlobalPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGlobalPermsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).CheckIfUserHasGlobalPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ftf_contract.Authorization/CheckIfUserHasGlobalPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).CheckIfUserHasGlobalPermissions(ctx, req.(*UserGlobalPermsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_CheckIfUserCanPerformGlobalActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGlobalActionsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).CheckIfUserCanPerformGlobalActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ftf_contract.Authorization/CheckIfUserCanPerformGlobalActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).CheckIfUserCanPerformGlobalActions(ctx, req.(*UserGlobalActionsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_CheckIfUserHasPermissionsOnEachEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEntityPermissionsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).CheckIfUserHasPermissionsOnEachEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ftf_contract.Authorization/CheckIfUserHasPermissionsOnEachEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).CheckIfUserHasPermissionsOnEachEntities(ctx, req.(*UserEntityPermissionsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_CheckIfUserHasPermissionsOnAllEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEntityPermissionsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).CheckIfUserHasPermissionsOnAllEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ftf_contract.Authorization/CheckIfUserHasPermissionsOnAllEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).CheckIfUserHasPermissionsOnAllEntities(ctx, req.(*UserEntityPermissionsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_CheckIfUserCanPerformActionsOnEachEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEntityActionsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).CheckIfUserCanPerformActionsOnEachEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ftf_contract.Authorization/CheckIfUserCanPerformActionsOnEachEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).CheckIfUserCanPerformActionsOnEachEntities(ctx, req.(*UserEntityActionsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_CheckIfUserCanPerformActionsOnAllEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEntityActionsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).CheckIfUserCanPerformActionsOnAllEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ftf_contract.Authorization/CheckIfUserCanPerformActionsOnAllEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).CheckIfUserCanPerformActionsOnAllEntities(ctx, req.(*UserEntityActionsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_GetUserPermissionsOnSolelyEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPermsOnSolelyEntitiesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetUserPermissionsOnSolelyEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ftf_contract.Authorization/GetUserPermissionsOnSolelyEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetUserPermissionsOnSolelyEntities(ctx, req.(*UserPermsOnSolelyEntitiesInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Authorization_ServiceDesc is the grpc.ServiceDesc for Authorization service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authorization_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ftf_contract.Authorization",
	HandlerType: (*AuthorizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Authorization_Ping_Handler,
		},
		{
			MethodName: "CheckIfUserHasGlobalPermissions",
			Handler:    _Authorization_CheckIfUserHasGlobalPermissions_Handler,
		},
		{
			MethodName: "CheckIfUserCanPerformGlobalActions",
			Handler:    _Authorization_CheckIfUserCanPerformGlobalActions_Handler,
		},
		{
			MethodName: "CheckIfUserHasPermissionsOnEachEntities",
			Handler:    _Authorization_CheckIfUserHasPermissionsOnEachEntities_Handler,
		},
		{
			MethodName: "CheckIfUserHasPermissionsOnAllEntities",
			Handler:    _Authorization_CheckIfUserHasPermissionsOnAllEntities_Handler,
		},
		{
			MethodName: "CheckIfUserCanPerformActionsOnEachEntities",
			Handler:    _Authorization_CheckIfUserCanPerformActionsOnEachEntities_Handler,
		},
		{
			MethodName: "CheckIfUserCanPerformActionsOnAllEntities",
			Handler:    _Authorization_CheckIfUserCanPerformActionsOnAllEntities_Handler,
		},
		{
			MethodName: "GetUserPermissionsOnSolelyEntities",
			Handler:    _Authorization_GetUserPermissionsOnSolelyEntities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authorization.proto",
}
